<?php namespace App\Modules\{{name}}\Http\Controllers;

use App\Http\Requests;
use App\Http\Controllers\Controller;
use App\Modules\{{name}}\Repositories\{{name}}Repository;
use Illuminate\Config\Repository as Config;
use Illuminate\Http\Request;

/**
 * Class {{name}}Controller
 *
 * @package App\Modules\{{name}}\Http\Controllers
 */
class {{name}}Controller extends Controller
{
    /**
     * {{name}} repository
     *
     * @var {{name}}Repository
     */
    private ${{smallname}}Repository;

    /**
     * Set repository and apply auth filter
     *
     * @param {{name}}Repository ${{smallname}}Repository
     */
    public function __construct({{name}}Repository ${{smallname}}Repository)
    {
        $this->middleware('auth');
        $this->{{smallname}}Repository = ${{smallname}}Repository;
    }

    /**
     * Return list of {{name}}
     *
     * @return Response
     */
    public function index(Config $config)
    {
        $this->checkPermissions(['{{smallname}}.index']);

        $onPage = $config->get('modules.{{smallname}}.pagination');

        $list = $this->{{smallname}}Repository->paginate($onPage);

        return response()->json($list);
    }


    /**
     * Store a newly created {{name}} in storage.
     *
     * @return Response
     */
    public function store(Request $request)
    {
        $this->checkPermissions(['{{smallname}}.store']);

        // @todo validation if needed

        $model = $this->{{smallname}}Repository->create($request->all());
        return response()->json($model, 201);
    }

    /**
     * Display the specified {{name}}
     *
     * @param  int $id
     *
     * @return Response
     */
    public function show($id)
    {
        $this->checkPermissions(['{{smallname}}.show']);
        $id = (int) $id;
        return response()->json($this->{{smallname}}Repository->find($id));
    }


    /**
     * Update the specified {{name}} in storage.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function update(Request $request, $id)
    {
        $this->checkPermissions(['{{smallname}}.update']);

        $id = (int) $id;

        // @todo validation if needed

        $record = $this->{{smallname}}Repository->updateWithIdAndInput($id,
            $request->all());

        return response()->json($record);
    }

    /**
     * Remove the specified {{name}} from storage.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function destroy($id)
    {
        $this->checkPermissions(['{{smallname}}.destroy']);
        $id = (int) $id;
        $this->{{smallname}}Repository->destroy($id);
    }
}
